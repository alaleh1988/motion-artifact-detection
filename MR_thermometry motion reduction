
%%% for all unwraped phantom images(ROI) by finding initial values based on
%%% each image itself and using fminunc for optimization 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% First Masking, then unwrapping

clc;clear all;close all
tic
%%% 1 magnitude , 2 phase images
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Reading phantom images
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Flash_heat = dir('H:\MRdata_Alaleh\20160318_24\pdata\2\dicom\*.dcm'); %reading the phase image
Flash_heat_mag = dir('H:\MRdata_Alaleh\20160318_24\pdata\1\dicom\*.dcm'); % Reading DICOM files %reading the magnitude image
% Flash_heat = dir('H:\MRdata_Alaleh\13\pdata\3\dicom\*.dcm'); %reading the phase image

a = size(Flash_heat,1);
for i = 1:a
 
    filename = strcat('H:\MRdata_Alaleh\20160318_24\pdata\2\dicom\',Flash_heat(i).name);
    filename_mag = strcat('H:\MRdata_Alaleh\20160318_24\pdata\1\dicom\',Flash_heat_mag(i).name);
    info = dicominfo(filename);
    X1= dicomread(info); 
    info_mag = dicominfo(filename_mag);
    X_mag = dicomread(info_mag);
    X_mag1(i,:,:) = X_mag;
    Xm = im2double(X_mag);
    X1 = im2double(X1);
    X1 = X1*2*pi-pi;
     
    temprobe_x = 83;     % T1:52,56,60 , T3:87 ,  T2:26
    temprobe_y = 37;     % T1:64,63,65 , T3:67 ,  T2:69

    
    center_p(i,:,:) = X1(temprobe_x:temprobe_x+7,temprobe_y:temprobe_y+7); % 4*4 ROI 
    center_m(i,:,:) = Xm(temprobe_x:temprobe_x+7,temprobe_y:temprobe_y+7); % 4*4 ROI 

end
% Xm(temprobe_x:temprobe_x+9,temprobe_y:temprobe_y+9)=1;
% imagesc(Xm)

Xp_unwrapped= sunwrap(center_m.*exp(center_p*1i)); %unwrapping function
% Xp_unwrapped = unwrap(center_p);
Xm = center_m;
% Xp_unwrapped = center_p;

Nb = 4;   %%%%%%%%%% Number of baseline images
X_base_m = Xm(1:Nb , : , :) ;
X_base_p = Xp_unwrapped(1:Nb , : , :);               %%%%%%% unwrapped baseline images
X_trt_m = Xm(Nb +1 : end, : , :) ;
X_trt_p = Xp_unwrapped(Nb + 1 : end, : , :);         %%%%%%% unwrapped treatment images


Ns = size(X_base_p,2);

for i= 1: Nb
    X_b_p_vec(i,:,:) =  reshape(X_base_p(i,:,:),1, size(X_base_p,2)^2);    %%% vectorizing baseline mag images
    X_b_m_vec(i,:,:) =  reshape(X_base_m(i,:,:),1, size(X_base_m,2)^2);    %%% vectorizing baseline phase images  
end
X_b_com_vec = X_b_m_vec + X_b_p_vec *1i;

X_b_com_vec = squeeze(X_b_com_vec)'; 
X_b_p_vec = squeeze(X_b_p_vec)'; 
X_b_m_vec = squeeze(X_b_m_vec)';


%%% check the eigenvalues
d = abs(X_b_m_vec);
dd= transpose(d) * d;
eg = eig(dd);
    Thetta_values=[];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Reading treatment image (mag)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for k = 1:55
    tic
    slice_phas = squeeze(X_trt_p(k,:,:));
    slice_mag = squeeze(X_trt_m(k,:,:));
%     slice_phas= sunwrap(slice_mag.*exp(slice_phas1*1i)); %unwrapping function

    % figure;
    % imagesc(slice_phas);colorbar
    % title('treatment unwrapped masked phase image');

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
    test_vec_p = reshape(slice_phas,1,length(slice_phas)^2);
    test_vec_m = reshape(slice_mag,1,length(slice_mag)^2);
    test_vec_comp = test_vec_m + 1i* test_vec_p;

    test_vec_m = test_vec_m';
    test_vec_comp = test_vec_comp';
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%% Initial value for W (baseline images weights)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    Aeq = ones(1,Nb);
    cvx_begin
        variable wb_initial(Nb,1)
        minimize( 0.5 * power(2, norm((abs(test_vec_m ) - abs(X_b_m_vec) * wb_initial ),2)))
        subject to
            wb_initial >= 0;
            Aeq * wb_initial == 1;
    cvx_end
    wb_initial;


    x_b_poly_vec_p = X_b_p_vec * wb_initial;      %%%% one baseline constructed phase image for next step of finding initial coeffints
    x_b_poly_p = reshape((x_b_poly_vec_p), length(x_b_poly_vec_p)^0.5, length(x_b_poly_vec_p)^0.5);
    x_b_poly_vec_m = X_b_m_vec * wb_initial;      %%%% one baseline constructed mag image for next step of finding initial coeffints
    x_b_poly_m = reshape((x_b_poly_vec_m), length(x_b_poly_vec_m)^0.5, length(x_b_poly_vec_m)^0.5);


    x_b_poly_vec = x_b_poly_vec_m + 1i* x_b_poly_vec_p;   %%%% one baseline constructed complex image for next step of finding initial coeffints

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%% Initial value for C (Coefficients)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        X_vec_comp = x_b_poly_vec';
        test_vec_poly_m = x_b_poly_vec_m';
        test_vec_poly_p = x_b_poly_vec_p'; 

        N_order = 5;
        s =(((N_order + 1)^2 - N_order - 1)/2) + (N_order + 1);
        aa = [1 : 1 : length(slice_phas)]' ./ length(slice_phas);

    %%%%%%%%%%%%%%%%%% Polynomial basis functions : A
        syms x
        syms y
         for j = 1: N_order + 1 
             for i = 1: N_order + 1
                 A1(i,j) = [(x^(j-1))* (y^(i-1))];
             end
         end
        A = transpose(rot90(rot90(rot90(tril(rot90(A1))))));
        A = reshape(A,1,length(A)^2);
        A(A==0) = [];
        A2 = A;
        A = subs(A, x, aa);
        A = subs(A, y, aa);

        %%%%%%
        theta = test_vec_poly_p'; 
        E = [];
        A = double(A); 
        poly = [];
        b = theta; 
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% L2 minimization
    % 
    poly = (A'*A)\(A'*b); %  L_2 sol.
    e = abs(A*poly - b)./ b; % Error vector
    E = norm(e,2); % Error 

     poly_opt = poly;
%     ppp = find(opt == min(opt(:,2:end)));
%     poly_opt = poly(:,:,ppp-1); 
    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%% Initial value for Theta (phase shift)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    phase_fitted = (A * poly_opt);
    phase_fitted = (double(phase_fitted))';

    phase_ini = reshape(phase_fitted,length(phase_fitted)^0.5,length(phase_fitted)^0.5);

    Thetta_initial = phase_ini - squeeze(X_base_p(1,:,:));
%         Thetta_initial = -phase_ini ;


    Thetta_initial_vec =  (reshape(Thetta_initial,1,length(Thetta_initial)^2))';
    Tpoint_center_estimated_initial(k) =- mean(mean(Thetta_initial_vec))/(.01*42.58*14*info.EchoTime*.001*2*pi);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%% Itterative updates for all three variables including w(baseline weights), theta( phase shift) and c( coefficients)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %Thetta_initial = slice_phas - squeeze(X_base_p(1,:,:));
    %Thetta_initial_vec = (reshape(Thetta_initial,1,length(Thetta_initial)^2))';
    test_vec_p = test_vec_p';
    test_p = test_vec_p  ;
    c = poly_opt;   %%% polynomial coef
    X = X_b_com_vec ;
    Y = test_vec_comp ;  %%%%%%%%%%%%%%%%%%%%%%% The tested image
    thettta = Thetta_initial_vec;
    %thettta = test_vec_p;
    A = double(A);
    err_total = 10;
    itr_total = 0;
    opt_total = 0;
    alpha = zeros (length(thettta),1);
    opt_w = 0;
    opt_th = 0;
    opt_c = 0;
    opt_a = 0;
    thetta_final = -2*ones (length(thettta),1);
    lambda = 0.1; 
    lambda2 = 0.1;
     while err_total > 0.001
      
         tic
         
      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%% W (baseline images weights) Optimatization
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        func_w =  @(we) (0.5 *(norm( Y .* exp(alpha - 1i *( A * c + thettta))- X * we ).^2));
        Aw = [];
        b = []; 
        beq = 1; 
        Aeq = ones(1,length(wb_initial));
        lb = zeros(Nb,1);
        [wb_final, fw_val, exitflag_w]  = fmincon(func_w, wb_initial, Aw, b, Aeq, beq, lb);
        opt_w = [opt_w fw_val];
        
           
%         wav_basis = WavMat( MakeONFilter('Daubechies',length(thettta)), length(thettta));
%         wav_coef = inv(wav_basis) * thettta;
       wav_coef =thettta';
       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%% Thetta Optimatization
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        obj_fun_th = @ (thta) (0.5 * (norm(( Y -   (X * wb_final) .* exp(alpha + 1i * (A * c + thta)) ),2).^2)+ lambda * norm( thta ,1)+ lambda2 * norm( alpha ,1)    );
        %options = optimoptions('fminunc','Display','iter','PlotFcns',@optimplotfval,'MaxFunEvals',1000000,'MaxIter', 1000000,'HessUpdate','steepdesc','OptimalityTolerance',1e-4);
        options = optimoptions('fminunc','MaxFunEvals',10000000,'MaxIter', 1000000,'HessUpdate','steepdesc','OptimalityTolerance',1e-7);
        [thetta_final, obj_fun_th_val2, exitflag_th]  = fminunc(obj_fun_th, thettta,options);
        thetta_final =  min( thetta_final, zeros(length(thettta),1)) ;
        opt_th = [opt_th obj_fun_th_val2];
        
       
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%% Alpha Optimatization
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        obj_fun_a = @ (alpha) (0.5 * (norm(( Y -   (X * wb_final) .* exp(alpha + 1i * (A * c + thetta_final )) ),2).^2)+ lambda * norm( thetta_final,1)+ lambda2 * norm( alpha ,1)  );
        %options = optimoptions('fminunc','Display','iter','PlotFcns',@optimplotfval,'MaxFunEvals',1000000,'MaxIter', 1000000,'HessUpdate','steepdesc','OptimalityTolerance',1e-4);
        options = optimoptions('fminunc','MaxFunEvals',10000000,'MaxIter', 1000000,'HessUpdate','steepdesc','OptimalityTolerance',1e-7);
        [alpha_final, obj_fun_a_val2, exitflag_a]  = fminunc(obj_fun_a, alpha,options);
%         alpha_final =  min( alpha_final, zeros(length(alpha),1)) ;
        opt_a = [opt_a obj_fun_a_val2];

       
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         %%%%%%% coefficients Optimatization
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         obj_fun_c =  @ (coef) (0.5 * (norm(( Y -   (X * wb_final) .* exp(alpha_final + 1i * (A * coef + thetta_final )) ),2).^2)+ lambda * norm( thetta_final,1)+ lambda2 * norm( alpha_final ,1)   );
         %options = optimoptions('fminunc','Display','iter','PlotFcns',@optimplotfval,'OptimalityTolerance',1e-4);
         options = optimoptions('fminunc','OptimalityTolerance',1e-7);
         [coef_final, obj_fun_c_val2, exitflag_c]  = fminunc(obj_fun_c, c, options);
         opt_c = [opt_c obj_fun_c_val2];
          
%%%%%%%%%%%% Check for temperature bias
         
%          for  jj = 1:length(thetta_final)
%              
%              while thetta_final(jj,1) < -(test_vec_p(jj,1))
%                  
%                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 %%%%%%% W (baseline images weights) Optimatization
%                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 func_w =  @(we) (0.5 *(norm( Y .* exp( 1i *( A * c + thettta))- X * we ).^2));
%                 Aw = [];
%                 b = []; 
%                 beq = 1; 
%                 Aeq = ones(1,length(wb_initial));
%                 lb = zeros(Nb,1);
%                 [wb_final, fw_val, exitflag_w]  = fmincon(func_w, wb_initial, Aw, b, Aeq, beq, lb);
% 
%                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 %%%%%%% Thetta Optimatization
%                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 obj_fun_th = @ (thta) ( 0.5 * (norm(( Y -   (X * wb_final) .* exp( 1i * (A * c + thta)) ),2).^2) );
%                 %options = optimoptions('fminunc','Display','iter','PlotFcns',@optimplotfval,'MaxFunEvals',1000000,'MaxIter', 1000000,'HessUpdate','steepdesc','OptimalityTolerance',1e-4);
%                 options = optimoptions('fminunc','MaxFunEvals',10000000,'MaxIter', 1000000,'HessUpdate','steepdesc','OptimalityTolerance',1e-7,'StepTolerance',1e-10);
%                 [thetta_final1, obj_fun_th_val2, exitflag_th]  = fminunc(obj_fun_th, thettta,options);
%                 thetta_final2 =  min( thetta_final1, zeros(length(thettta),1)) ;
% 
%                  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                  %%%%%%% coefficients Optimatization
%                  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                  obj_fun_c =  @ (coef) (0.5 * (norm(( Y -   (X * wb_final) .* exp( 1i * (A * coef + thetta_final )) ),2).^2) );
%                  %options = optimoptions('fminunc','Display','iter','PlotFcns',@optimplotfval,'OptimalityTolerance',1e-4);
%                  options = optimoptions('fminunc','OptimalityTolerance',1e-8,'StepTolerance',1e-10);
%                  [coef_final, obj_fun_c_val2, exitflag_c]  = fminunc(obj_fun_c, c, options);
%                  
%      
%                  wb_initial = wb_final;
%                  c = coef_final;
%                  thettta = thetta_final2;
%                  
%                  thetta_final(jj,1) = thetta_final2(jj,1);
%                  
%              end
%          end
                 

         %%%%%%%%%%%%%%%%%%%% 
         obj_fun_total =  @(alpha, coef, wb, theta) (0.5 * (norm(( Y -   (X * wb) .* exp(alpha + 1i * (A * coef + theta )) ),2).^2)+ lambda * norm(theta,1)+ lambda2 * norm( alpha ,1)   );
         err_total = abs( obj_fun_total(alpha_final, c , wb_initial, thettta )- obj_fun_total(alpha_final, coef_final , wb_final, thetta_final) ) / obj_fun_total(alpha_final, c , wb_initial, thettta);
         error(k) = err_total;
         opt_total = [opt_total obj_fun_total(alpha_final, coef_final , wb_final, thetta_final)];
         wb_initial = wb_final;
         c = coef_final;
         thettta = thetta_final;
         alpha = alpha_final;
         itr_total = itr_total + 1;
         Thetta_values(k,:,:) = thetta_final;
         Alpha_values(k,:,:) = alpha_final;

        t_while(itr_total,k) = toc;
     end
%      alpha_final = zeros (length(thettta),1);
      new_slice1 = (X * wb_final) .* exp(alpha_final + 1i * (A * coef_final + thetta_final ));  %%% image model


     Final_theta1 = reshape(imag(new_slice1), length( thetta_final)^0.5, length(thetta_final)^0.5);   
  

     Tpoint_center(k) = -mean(mean(slice_phas - squeeze(X_base_p(1,:,:))))/(.01*42.58*14*info.EchoTime*.001*2*pi) ;

     Tpoint_center_estimated(k) = -mean(mean(-Final_theta1- squeeze(X_base_p(1,:,:))))/(.01*42.58*14*info.EchoTime*.001*2*pi);

   t_for(k) = toc;
end

%%%%%%%%%%%%%%%%%%%%%%%%
%%% Read temp prob
%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%% for motion-phantom(23) ,20w
% a = size(Flash_heat,1);
% load('temp_prob_motion_20w.mat')
% temp_prob = table2array(Phantommotion20W2);
% temp_prob = temp_prob(1:a,:);
% for i= 1:length(temp_prob)
%     delta_temp_prob(i,:)  = temp_prob(i,:) - temp_prob(1,:);
% end
% plot(delta_temp_prob(1:end,1),'g*')


% %%%%%%%%%%%%%%%%%%%%%%% for motion-phantom(21) ,7w
% a = size(Flash_heat,1);
% load('temp_prob_motion_7w.mat')
% temp_prob = table2array(Phantommotion7W2);
%  temp_prob = temp_prob(1:a,:);
% for i= 1:length(temp_prob)
%     delta_temp_prob(i,:)  = temp_prob(i,:) - temp_prob(1,:);
% end
% plot(delta_temp_prob(1:end,1),'g*')

%%%%%%%%%%%%%%%%%%%%%%%% for phantom(20160318_24) ,10w
% load('temp_prob.mat')
% temp_prob = temp_prob(1:300,:);
% for i= 1:length(temp_prob)
%     delta_temp_prob(i,:)  = temp_prob(i,:) - temp_prob(1,:);
% end
% plot(delta_temp_prob(26:end,1),'gs')
% hold on
 
axx=(1:length(Tpoint_center))/(length(Tpoint_center)/274);
plot(axx,Tpoint_center,'*-')
hold on
plot( axx,Tpoint_center_estimated, 'ro:')
% hold on
% plot(temp_prob(:,1),'g:')
% plot(Tpoint_center_estimated_initial, 'gs-')
legend('Actual temp','Estimated temp(image model)','Estimated temp(AC)','Estimated temp(theta)','Location','southeast')
title('Hybrid temp estimation')
toc
